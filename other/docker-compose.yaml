networks:
  reverse_proxy:
    name: reverse_proxy
    external: true
  internet:
    name: internet
    external: true
  redis:
    name: redis
    internal: true
  postgres:
    name: postgres
    internal: true

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    volumes:
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/bookmarks.yaml:/app/config/bookmarks.yaml:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/custom.css:/app/config/custom.css:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/custom.js:/app/config/custom.js:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/docker.yaml:/app/config/docker.yaml:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/kubernetes.yaml:/app/config/kubernetes.yaml:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/services.yaml:/app/config/services.yaml:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/settings.yaml:/app/config/settings.yaml:ro
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/config/widgets.yaml:/app/config/widgets.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/images:/app/public/images:ro # Background images
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/homepage/icons:/app/public/icons:ro # Background images
    environment:
      - HOMEPAGE_ALLOWED_HOSTS=${TRAEFIK_DOMAIN_NAME}
      - HOMEPAGE_VAR_BASE_DOMAIN_NAME=${TRAEFIK_DOMAIN_NAME}
    networks:
      - reverse_proxy
      - internet
    labels:
      traefik.enable: true
      traefik.docker.network: reverse_proxy
      traefik.http.routers.homepage-router.rule: Host(`${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.homepage-router.entrypoints: websecure
      traefik.http.routers.homepage-router.service: homepage-service
      traefik.http.routers.homepage-router.tls: true
      traefik.http.services.homepage-service.loadbalancer.server.port: 3000
      traefik.http.services.homepage-service.loadbalancer.server.scheme: http

  watchtower:
    image: containrrr/watchtower:1.7.1
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
    restart: unless-stopped

  samba:
    image: dperson/samba:latest
    container_name: samba
    restart: unless-stopped
    ports:
      - 139:139
      - 445:445
    environment:
      - USERID=${USER_UID}
      - GROUPID=${USER_GID}
    volumes:
      - ${GENERAL_BASE_DOCKER_MEDIA_PATH}:/media
      - ${GENERAL_BASE_DOCKER_FILES_PATH}:/files
      - ${GENERAL_BASE_DOCKER_BACKUP_PATH}:/backup
    command: >
      -u "${SAMBA_USER1_USERNAME};${SAMBA_USER1_PASSWORD}"
      -u "${SAMBA_USER2_USERNAME};${SAMBA_USER2_PASSWORD}"
      -s "media;/media;yes;no;no"
      -s "files;/files;yes;no;no"
      -s "backup;/backup;yes;no;no"

  stirling-pdf:
    image: docker.stirlingpdf.com/stirlingtools/stirling-pdf:latest
    container_name: stirling-pdf
    volumes:
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/StirlingPDF/trainingData:/usr/share/tessdata # Required for extra OCR languages
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/StirlingPDF/extraConfigs:/configs
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/StirlingPDF/customFiles:/customFiles/
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/StirlingPDF/logs:/logs/
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/StirlingPDF/pipeline:/pipeline/
    environment:
      - DOCKER_ENABLE_SECURITY=false
      - LANGS=${GENERAL_LANG}
    networks:
      - reverse_proxy
    labels:
      traefik.enable: true
      traefik.docker.network: reverse_proxy

      # Rule for port 8080 (stirling-pdf)
      traefik.http.routers.stirling-pdf-router.rule: Host(`stirling-pdf.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.stirling-pdf-router.entrypoints: websecure
      traefik.http.routers.stirling-pdf-router.service: stirling-pdf-service
      traefik.http.routers.stirling-pdf-router.tls: true
      traefik.http.services.stirling-pdf-service.loadbalancer.server.port: 8080
      traefik.http.services.stirling-pdf-service.loadbalancer.server.scheme: http

  redis:
    image: docker.io/library/redis:8.2.1
    container_name: redis
    restart: unless-stopped
    volumes:
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/redis:/data
    networks:
      - redis

  postgres:
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    container_name: postgres
    restart: unless-stopped
    volumes:
      - ${GENERAL_BASE_DOCKER_STATIC_CONFIG_PATH}/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh:ro
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_STORAGE_TYPE: 'HDD'
    networks:
      - postgres

  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:2.18.3
    container_name: paperless
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    volumes:
      - ${GENERAL_BASE_DOCKER_FILES_PATH}/paperless/data:/usr/src/paperless/data
      - ${GENERAL_BASE_DOCKER_FILES_PATH}/paperless/media:/usr/src/paperless/media
      - ${GENERAL_BASE_DOCKER_FILES_PATH}/paperless/export:/usr/src/paperless/export
      - ${GENERAL_BASE_DOCKER_FILES_PATH}/paperless/consume:/usr/src/paperless/consume
    environment:
      USERMAP_UID: 1000
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBENGINE: postgresql
      PAPERLESS_DBHOST: postgres
      PAPERLESS_DBUSER: ${POSTGRES_USER}
      PAPERLESS_DBPASS: ${POSTGRES_PASSWORD}
      PAPERLESS_DBNAME: paperless
      PAPERLESS_URL: https://paperless.${TRAEFIK_DOMAIN_NAME}
      PAPERLESS_TIME_ZONE: ${GENERAL_TIMEZONE}
      PAPERLESS_OCR_LANGUAGE: ${PAPERLESS_LANGUAGE}
      PAPERLESS_OCR_LANGUAGES: ${PAPERLESS_LANGUAGES}
      PAPERLESS_SECRET_KEY: "8ka4lvi8I4mRarLVyrPEj8IKC4i1HVSs"
      PAPERLESS_ADMIN_USER: ${PAPERLESS_ADMIN_USER}
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
    networks:
      - reverse_proxy
      - redis
      - internet
      - postgres
    mem_limit: 1g
    labels:
      traefik.enable: true
      traefik.docker.network: reverse_proxy

      # Rule for port 8000 (paperless)
      traefik.http.routers.paperless-router.rule: Host(`paperless.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.paperless-router.entrypoints: websecure
      traefik.http.routers.paperless-router.service: paperless-service
      traefik.http.routers.paperless-router.tls: true
      traefik.http.services.paperless-service.loadbalancer.server.port: 8000
      traefik.http.services.paperless-service.loadbalancer.server.scheme: http

  immich:
    image: ghcr.io/immich-app/immich-server:v1.140.1
    container_name: immich
    restart: unless-stopped
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${GENERAL_BASE_DOCKER_FILES_PATH}/immich:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    environment:
      TZ: ${GENERAL_TIMEZONE}
      DB_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/immich
      DB_PASSWORD: ${POSTGRES_USER}
      DB_USERNAME: ${POSTGRES_PASSWORD}
      DB_DATABASE_NAME: immich
    depends_on:
      - redis
      - postgres
    healthcheck:
      disable: false
    networks:
      - reverse_proxy
      - postgres
      - redis
      - internet
    labels:
      traefik.enable: true
      traefik.docker.network: reverse_proxy

      # Rule for port 2283 (immich)
      traefik.http.routers.immich-router.rule: Host(`immich.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.immich-router.entrypoints: websecure
      traefik.http.routers.immich-router.service: immich-service
      traefik.http.routers.immich-router.tls: true
      traefik.http.services.immich-service.loadbalancer.server.port: 2283
      traefik.http.services.immich-service.loadbalancer.server.scheme: http

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:v1.140.1
    container_name: immich-machine-learning
    restart: unless-stopped
    networks:
      - internet
    volumes:
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/immich/cache:/cache
    healthcheck:
      disable: false

  commafeed:
    image: athou/commafeed:latest-h2
    container_name: commafeed
    restart: unless-stopped
    volumes:
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/commafeed/db:/commafeed/data
    environment:
      COMMAFEED_HTTP_CLIENT_BLOCK_LOCAL_ADDRESSES: false
    deploy:
      resources:
        limits:
          memory: 256M
    network_mode: container:vpn

  rsshub:
    image: diygod/rsshub:latest
    container_name: rsshub
    restart: unless-stopped
    environment:
      NODE_ENV: production
      TWITTER_AUTH_TOKEN: ${RSSHUB_TWITTER_AUTH_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1200/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    network_mode: container:vpn
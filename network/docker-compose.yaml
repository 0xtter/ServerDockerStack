networks:
  reverse_proxy:
    name: reverse_proxy
    internal: true
  internet:
    name: internet

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/portainer/data:/data
    command: --admin-password '${PORTAINER_ADMIN_PASSWORD}'
    networks:
      - reverse_proxy
    labels:
      traefik.enable: true

      # Rule for port 9443 (portainer)
      traefik.http.routers.portainer-router.rule: Host(`portainer.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.portainer-router.entrypoints: websecure
      traefik.http.routers.portainer-router.service: portainer-service
      traefik.http.routers.portainer-router.tls.certresolver: myresolver
      traefik.http.services.portainer-service.loadbalancer.server.port: 9443
      traefik.http.services.portainer-service.loadbalancer.server.scheme: https
    
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=duckdns"
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[0]=1.1.1.1:53
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[1]=8.8.8.8:53
      - "--certificatesresolvers.myresolver.acme.email=postmaster@${TRAEFIK_DOMAIN_NAME}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.myresolver.acme.dnschallenge.propagation.delayBeforeChecks=120"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.propagation.disableChecks=true"
      - "--serverstransport.insecureskipverify=true"
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DUCKDNS_TOKEN=${TRAEFIK_DUCKDNS_TOKEN}
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - reverse_proxy
      - internet
    labels:
      traefik.enable: true

      # Rule for port 8080 (traefik)
      traefik.http.routers.traefik-router.rule: Host(`traefik.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.traefik-router.entrypoints: websecure
      traefik.http.routers.traefik-router.service: traefik-service
      traefik.http.routers.traefik-router.tls.certresolver: myresolver
      traefik.http.services.traefik-service.loadbalancer.server.port: 8080
      traefik.http.services.traefik-service.loadbalancer.server.scheme: http

  vpn:
    image: qmcgaw/gluetun
    container_name: vpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${GENERAL_BASE_DOCKER_DATA_PATH}/gluetun:/gluetun
    environment:
      # See https://github.com/qdm12/gluetun-wiki/tree/main/setup#setup
      - VPN_SERVICE_PROVIDER=nordvpn
      - VPN_TYPE=wireguard
      # Wireguard:
      - WIREGUARD_PRIVATE_KEY=${NORDVPN_PRIVATE_KEY}
      - SERVER_COUNTRIES=${VPN_SERVER_COUNTRY}
      # Timezone for accurate log times
      - TZ=${GENERAL_TIMEZONE}
      # - FIREWALL_OUTBOUND_SUBNETS=${VPN_LOCAL_SUBNET_RANGE}
    networks:
      - reverse_proxy
      - internet
    labels:
      traefik.enable: true

      # Rule for port 5800 (firefox)
      traefik.http.routers.firefox-router.rule: Host(`firefox.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.firefox-router.entrypoints: websecure
      traefik.http.routers.firefox-router.service: firefox-service
      traefik.http.routers.firefox-router.tls.certresolver: myresolver
      traefik.http.services.firefox-service.loadbalancer.server.port: 5800
      traefik.http.services.firefox-service.loadbalancer.server.scheme: http

      # Rule for port 8090 (qbitorrent)
      traefik.http.routers.qbitorrent-router.rule: Host(`qbitorrent.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.qbitorrent-router.entrypoints: websecure
      traefik.http.routers.qbitorrent-router.service: qbitorrent-service
      traefik.http.routers.qbitorrent-router.tls.certresolver: myresolver
      traefik.http.services.qbitorrent-service.loadbalancer.server.port: 8090
      traefik.http.services.qbitorrent-service.loadbalancer.server.scheme: http

      # Rule for port 9696 (prowlarr)
      traefik.http.routers.prowlarr-router.rule: Host(`prowlarr.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.prowlarr-router.entrypoints: websecure
      traefik.http.routers.prowlarr-router.service: prowlarr-service
      traefik.http.routers.prowlarr-router.tls.certresolver: myresolver
      traefik.http.services.prowlarr-service.loadbalancer.server.port: 9696
      traefik.http.services.prowlarr-service.loadbalancer.server.scheme: http

      # Rule for port 7878 (radarr)
      traefik.http.routers.radarr-router.rule: Host(`radarr.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.radarr-router.entrypoints: websecure
      traefik.http.routers.radarr-router.service: radarr-service
      traefik.http.routers.radarr-router.tls.certresolver: myresolver
      traefik.http.services.radarr-service.loadbalancer.server.port: 7878
      traefik.http.services.radarr-service.loadbalancer.server.scheme: http

      # Rule for port 8989 (sonarr)
      traefik.http.routers.sonarr-router.rule: Host(`sonarr.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.sonarr-router.entrypoints: websecure
      traefik.http.routers.sonarr-router.service: sonarr-service
      traefik.http.routers.sonarr-router.tls.certresolver: myresolver
      traefik.http.services.sonarr-service.loadbalancer.server.port: 8989
      traefik.http.services.sonarr-service.loadbalancer.server.scheme: http

      # Rule for port 6767 (bazarr)
      traefik.http.routers.bazarr-router.rule: Host(`bazarr.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.bazarr-router.entrypoints: websecure
      traefik.http.routers.bazarr-router.service: bazarr-service
      traefik.http.routers.bazarr-router.tls.certresolver: myresolver
      traefik.http.services.bazarr-service.loadbalancer.server.port: 6767
      traefik.http.services.bazarr-service.loadbalancer.server.scheme: http

      # Rule for port 17442 (youtube-dl)
      traefik.http.routers.youtube-dl-router.rule: Host(`youtube-dl.${TRAEFIK_DOMAIN_NAME}`)
      traefik.http.routers.youtube-dl-router.entrypoints: websecure
      traefik.http.routers.youtube-dl-router.service: youtube-dl-service
      traefik.http.routers.youtube-dl-router.tls.certresolver: myresolver
      traefik.http.services.youtube-dl-service.loadbalancer.server.port: 17442
      traefik.http.services.youtube-dl-service.loadbalancer.server.scheme: http